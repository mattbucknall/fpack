#!/usr/bin/env python3

# MIT License
# 
# Copyright (c) 2017 Matthew T. Bucknall
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import hashlib
import hmac
import json
import os
import sys

from Crypto.Cipher import AES


METADATA_MAX_N = 65535
METADATA_MAX_KEY_LENGTH = 15
METADATA_MAX_VALUE_LENGTH = 63

IMAGE_MAX_N = 65535
IMAGE_MAX_ID_LENGTH = 15

FPK_SIGNATURE_METHOD_NONE = 0
FPK_SIGNATURE_METHOD_HMAC_SHA256 = 1

FPK_CIPHER_METHOD_NONE = 0
FPK_CIPHER_METHOD_AES128_CBC = 1


class FatalError(Exception):
    def __init__(self, message):
        self._message = message

    def __str__(self):
        return str(self._message)


def build_key(key_json, length, options):
    key_str = key_json.get("key")
    key_file = key_json.get("key-file")
    write_file = False

    if key_str is None and key_file is None:
        raise TypeError("No key or key-file specified")

    if key_str is not None and type(key_str) is not str:
        raise TypeError("key must be a string")

    if type(key_file) is str:
        key_file = os.path.join(options.get("root_dir"), key_file)

        if key_str is None:
            try:
                with open(key_file, "r") as f:
                    key_str = f.read().strip()
            except FileNotFoundError:
                key_str = os.urandom(length).hex()
                write_file = True
            except IOError as err:
                raise IOError("Unable to read key file: {0}".format(err))
        else:
            write_file = True
    elif key_file is not None:
        raise TypeError("key-file must be a string")

    try:
        key = bytearray.fromhex(key_str)
    except ValueError:
        raise ValueError("Invalid key string: {0}".format(key_str))

    if len(key) != length:
        raise ValueError("Key must contain {0} hexadecimal digits".format(length * 2))

    if write_file:
        try:
            os.remove(key_file)
        except OSError:
            pass

        saved_umask = None

        try:
            saved_umask = os.umask(0o177)
            fdesc = os.open(key_file, os.O_WRONLY | os.O_CREAT, 0o600)
            with os.fdopen(fdesc, "w") as f:
                f.write(key_str + "\n")
        except IOError as err:
            raise IOError("Unable to write key file: {0}".format(err))
        finally:
            os.umask(saved_umask)

    return bytes(key)


class Signatory:
    def __init__(self):
        pass

    @staticmethod
    def method_id():
        return FPK_SIGNATURE_METHOD_NONE


class HmacSha256Signatory(Signatory):
    METHOD_NAME = "hmac-sha256"

    def __init__(self, signatory_json, options):
        super().__init__()
        self.key = build_key(signatory_json, 32, options)

    def __str__(self):
        return HmacSha256Signatory.METHOD_NAME

    def __repr__(self):
        return "Signatory({0})".format(self)

    @staticmethod
    def method_id():
        return FPK_SIGNATURE_METHOD_HMAC_SHA256

    def sign(self, buffer):
        return hmac.new(self.key, buffer, hashlib.sha256).digest()


class Cipher:
    def __init__(self):
        pass

    @staticmethod
    def method_id():
        return FPK_CIPHER_METHOD_NONE


class Aes128CbcCipher(Cipher):
    METHOD_NAME = "aes128-cbc"

    def __init__(self, cipher_json, options):
        super().__init__()
        self.key = build_key(cipher_json, 16, options)

    def __str__(self):
        return Aes128CbcCipher.METHOD_NAME

    def __repr__(self):
        return "Cipher({0})".format(self)

    @staticmethod
    def method_id():
        return FPK_CIPHER_METHOD_AES128_CBC

    def encrypt(self, buffer):
        iv = os.urandom(16)
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        return iv + cipher.encrypt(bytes(buffer))


class Image:
    def __init__(self, image_json, options):
        if type(image_json) is not dict:
            raise TypeError("Image section may only contain objects")

        image_id = image_json.get("id")
        if image_id is None:
            raise TypeError("ID missing from image specification")
        if type(image_id) is not str:
            raise TypeError("Image ID is not a string")

        self.id = image_id.encode("utf-8")
        if len(self.id) > IMAGE_MAX_ID_LENGTH:
            raise ValueError("Image IDs cannot exceed {0} bytes in length (UTF-8 encoded)"
                             .format(IMAGE_MAX_ID_LENGTH))

        path = image_json.get("path")
        if path is None:
            raise TypeError("{0}: Path missing from image specification".format(id))
        if type(path) is not str:
            raise TypeError("{0}: Image path is not a string".format(id))

        path = os.path.join(options["root_dir"], path)

        try:
            with open(path, "rb") as f:
                self.payload = f.read()
        except FileNotFoundError:
            raise FatalError("Image file '{0}' not found".format(path))
        except IOError:
            raise FatalError("Unable to read image file '{0}'".format(path))

    def __str__(self):
        return self.id.decode('utf-8')

    def __repr__(self):
        return "Image({0})".format(self)


class Crc32:
    LUT = [
        0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f,
        0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988,
        0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2,
        0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,
        0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,
        0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172,
        0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c,
        0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,
        0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423,
        0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,
        0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106,
        0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,
        0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d,
        0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e,
        0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,
        0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,
        0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7,
        0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0,
        0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa,
        0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
        0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81,
        0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a,
        0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84,
        0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,
        0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,
        0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc,
        0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e,
        0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,
        0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55,
        0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,
        0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28,
        0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,
        0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f,
        0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38,
        0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,
        0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,
        0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69,
        0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2,
        0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc,
        0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
        0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693,
        0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94,
        0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d
    ]

    def __init__(self):
        self._crc = 0xFFFFFFFF

    def reset(self):
        self.__init__()

    def update(self, buffer):
        crc = 0xFFFFFFFF - self._crc

        for b in buffer:
            crc = self.LUT[(crc ^ b) & 0xFF] ^ ((crc >> 8) & 0xFFFFFFFF)

        self._crc = 0xFFFFFFFF - crc

    def digest(self):
        return self._crc


def print_usage():
    print(
        "Usage: {0} <spec-file> <fpk-file> [root-dir]\n\n"
        "  <spec-file>      Path to input JSON file specifying images\n"
        "                   to include in FPK file, encryption keys\n"
        "                   etc.\n\n"
        "  <fpk-file>       Path for FPK output file.\n\n"
        "  [root-dir]       Optional argument, specifies path prefix\n"
        "                   for any files referenced in <spec-file>.\n"
        .format(os.path.basename(__file__))
    )


def build_signatory(signature_json, options):
    if signature_json is None:
        return None

    if type(signature_json) is not dict:
        raise TypeError("Signature section must be an object")

    method = signature_json.get("method")
    if method is None:
        raise TypeError("Method missing from signature section")

    if type(method) is not str:
        raise TypeError("Signature method is not a string")

    method = method.lower()

    if method == "none":
        return None
    elif method == HmacSha256Signatory.METHOD_NAME:
        return HmacSha256Signatory(signature_json, options)
    else:
        raise ValueError("Unknown signature method: {0}".format(method))


def build_cipher(cipher_json, options):
    if cipher_json is None:
        return None

    if type(cipher_json) is not dict:
        raise TypeError("Cipher section must be an object")

    method = cipher_json.get("method")
    if method is None:
        raise TypeError("Method missing from cipher section")

    if type(method) is not str:
        raise TypeError("Cipher method is not a string")

    method = method.lower()

    if method == "none":
        return None
    elif method == Aes128CbcCipher.METHOD_NAME:
        return Aes128CbcCipher(cipher_json, options)
    else:
        raise ValueError("Unknown cipher method: {0}".format(method))


def build_metadata(metadata_json):
    data = {}

    if metadata_json is None:
        return data

    if type(metadata_json) is not dict:
        raise TypeError("Metadata section must be an object")

    if len(metadata_json) > METADATA_MAX_N:
        raise ValueError("Metadata section cannot contain more than {0} key-value pairs"
                         .format(METADATA_MAX_N))

    for key, value in metadata_json.items():
        utf8_key = key.encode("utf-8")
        if len(utf8_key) > METADATA_MAX_KEY_LENGTH:
            raise ValueError("Metadata keys cannot exceed {0} bytes in length (UTF-8 encoded)"
                             .format(METADATA_MAX_KEY_LENGTH))

        utf8_value = str(value).encode("utf-8")
        if len(utf8_value) > METADATA_MAX_VALUE_LENGTH:
            raise ValueError("{0}:Metadata values cannot exceed {1} bytes in length (UTF-8 encoded"
                             .format(key, METADATA_MAX_VALUE_LENGTH))

        data[utf8_key] = utf8_value

    return data


def build_image_list(image_list_json, options):
    data = []

    if image_list_json is None:
        return data

    if type(image_list_json) is not list:
        raise TypeError("Image section must be an array")

    if len(image_list_json) > IMAGE_MAX_N:
        raise ValueError("Image section cannot contain more than {0} images"
                         .format(IMAGE_MAX_N))

    for image_json in image_list_json:
        data.append(Image(image_json, options))

    return data


def append_u16(buffer, value):
    buffer.append(value & 0xFF)
    buffer.append((value >> 8) & 0xFF)


def append_u32(buffer, value):
    buffer.append(value & 0xFF)
    buffer.append((value >> 8) & 0xFF)
    buffer.append((value >> 16) & 0xFF)
    buffer.append((value >> 24) & 0xFF)


def padding_length(buffer, alignment):
    length = len(buffer)
    aligned_length = int((length + alignment - 1) / alignment) * alignment
    return aligned_length - length;


def append_alignment_padding(buffer, alignment):
    buffer += b'\0' * padding_length(buffer, alignment)


def append_preamble(buffer, n_blocks, signatory: Signatory, cipher: Cipher):
    buffer.append(0x46)  # F
    buffer.append(0x50)  # P
    buffer.append(0x4B)  # K
    buffer.append(0x00)  # Version 0
    append_u32(buffer, n_blocks)

    if signatory is None:
        buffer.append(FPK_SIGNATURE_METHOD_NONE)
    else:
        buffer.append(signatory.method_id())

    if cipher is None:
        buffer.append(FPK_CIPHER_METHOD_NONE)
    else:
        buffer.append(cipher.method_id())

    append_alignment_padding(buffer, 16)


def append_metadata(buffer, metadata):
    append_u16(buffer, len(metadata))

    for key, value in metadata.items():
        buffer.append(len(key))
        buffer += key
        buffer.append(len(value))
        buffer += value


def append_image_list(buffer, image_list):
    append_u16(buffer, len(image_list))

    for image in image_list:
        buffer.append(len(image.id))
        buffer += image.id
        append_u32(buffer, len(image.payload))
        buffer += image.payload


def append_epilogue(buffer, crc: Crc32):
    append_u32(buffer, crc.digest())
    append_alignment_padding(buffer, 16)


def build_fpk(spec_json, options):
    try:
        if type(spec_json) is not dict:
            raise TypeError("Root must be an object")

        signatory = build_signatory(spec_json.get("signature"), options)
        cipher = build_cipher(spec_json.get("cipher"), options)
        metadata = build_metadata(spec_json.get("metadata"))
        image_list = build_image_list(spec_json.get("images"), options)

        if cipher is not None and signatory is None:
            print("WARNING: Cipher used without signature - Encrypted FPKs really ought to be signed.")

    except TypeError as err:
        raise FatalError("Spec-file has invalid format: {0}".format(err))
    except ValueError as err:
        raise FatalError("Spec-file contains invalid value: {0}".format(err))

    payload = bytearray()
    append_metadata(payload, metadata)
    append_image_list(payload, image_list)
    append_alignment_padding(payload, 16)

    if cipher:
        payload = cipher.encrypt(payload)

    n_blocks = int(len(payload) / 16)

    fpk = bytearray()

    append_preamble(fpk, n_blocks, signatory, cipher)
    fpk += payload

    if signatory is not None:
        fpk += signatory.sign(payload)

    crc = Crc32()
    crc.update(fpk)
    append_epilogue(fpk, crc)

    return fpk


def main(args=None):
    if args is None:
        args = sys.argv

    if len(args) < 3:
        print_usage()
        sys.exit(0)

    spec_path = sys.argv[1]
    fpk_path = sys.argv[2]

    options = {
        "root_dir": "."
    }

    if len(args) >= 4:
        options["root_dir"] = sys.argv[3]

    try:
        with open(spec_path) as f:
            spec_json = json.load(f)
    except FileNotFoundError:
        raise FatalError("Spec-file {0} does not exist".format(spec_path))
    except IOError as err:
        raise FatalError("Unable to read spec-file: {0}".format(err))
    except ValueError as err:
        raise FatalError("Spec-file contains invalid JSON: {0}".format(err))

    fpk = build_fpk(spec_json, options)

    try:
        with open(fpk_path, "wb") as f:
            f.write(fpk)
    except IOError as err:
        raise FatalError("Unable to write FPK file: {0}".format(err))


try:
    if __name__ == "__main__":
        main()
except FatalError as err:
    print("Fatal error: {0}".format(err))
    exit(1)
