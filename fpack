#!/usr/bin/env python3

# MIT License
# 
# Copyright (c) 2017 Matthew T. Bucknall
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


import json
import os
import sys


METADATA_MAX_KEY_LENGTH = 15
METADATA_MAX_VALUE_LENGTH = 63
IMAGE_MAX_ID_LENGTH = 15

FPK_SIGNATURE_METHOD_NONE = 0
FPK_SIGNATURE_METHOD_HMAC_SHA256 = 1

FPK_CIPHER_METHOD_NONE = 0
FPK_CIPHER_METHOD_AES128_CBC = 1


class FatalError(Exception):
    def __init__(self, message):
        self._message = message

    def __str__(self):
        return str(self._message)


class Signatory:
    def __init__(self):
        pass


class HmacSha256Signatory(Signatory):
    METHOD_NAME = "hmac-sha256"

    def __init__(self, signatory_json):
        pass

    def __str__(self):
        return HmacSha256Signatory.METHOD_NAME

    def __repr__(self):
        return "Signatory({0})".format(self)

    @staticmethod
    def id():
        return FPK_SIGNATURE_METHOD_HMAC_SHA256


class Cipher:
    def __init__(self):
        pass


class Aes128CbcCipher(Cipher):
    METHOD_NAME = "aes128-cbc"

    def __init__(self, cipher_json):
        pass

    def __str__(self):
        return Aes128CbcCipher.METHOD_NAME

    def __repr__(self):
        return "Cipher({0})".format(self)

    @staticmethod
    def id():
        return FPK_CIPHER_METHOD_AES128_CBC


class Image:
    def __init__(self, image_json):
        if type(image_json) is not dict:
            raise TypeError("Image section may only contain objects")

        id = image_json.get("id")
        if id is None:
            raise TypeError("ID missing from image specification")
        if type(id) is not str:
            raise TypeError("Image ID is not a string")

        self.id = id.encode("utf-8")
        if len(self.id) > IMAGE_MAX_ID_LENGTH:
            raise ValueError("Image IDs cannot exceed {0} bytes in length (UTF-8 encoded)"
                             .format(IMAGE_MAX_ID_LENGTH))

        self.path = image_json.get("path")
        if self.path is None:
            raise TypeError("{0}: Path missing from image specification".format(id))
        if type(self.path) is not str:
            raise TypeError("{0}: Image path is not a string".format(id))

    def __str__(self):
        return self.id.decode('utf-8')

    def __repr__(self):
        return "Image({0})".format(self)


def print_usage():
    print(
        "Usage: {0} <spec-file> <fpk-file>\n\n"
        "  <spec-file>      Path to input JSON file specifying images\n"
        "                   to include in FPK file, encryption keys\n"
        "                   etc.\n\n"
        "  <fpk-file>       Path for FPK output file.\n\n"
        .format(os.path.basename(__file__))
    )


def read_json_file(path):
    with open(path) as f:
        json_data = json.load(f)
    return json_data


def build_signatory(signature_json):
    if signature_json is None:
        return None

    if type(signature_json) is not dict:
        raise TypeError("Signature section must be an object")

    method = signature_json.get("method")
    if method is None:
        raise TypeError("Method missing from signature section")

    if type(method) is not str:
        raise TypeError("Signature method is not a string")

    method = method.lower()

    if method == "none":
        return None
    elif method == HmacSha256Signatory.METHOD_NAME:
        return HmacSha256Signatory(signature_json)
    else:
        raise ValueError("Unknown signature method: {0}".format(method))


def build_cipher(cipher_json):
    if cipher_json is None:
        return None

    if type(cipher_json) is not dict:
        raise TypeError("Cipher section must be an object")

    method = cipher_json.get("method")
    if method is None:
        raise TypeError("Method missing from cipher section")

    if type(method) is not str:
        raise TypeError("Cipher method is not a string")

    method = method.lower()

    if method == "none":
        return None
    elif method == Aes128CbcCipher.METHOD_NAME:
        return Aes128CbcCipher(cipher_json)
    else:
        raise ValueError("Unknown cipher method: {0}".format(method))


def build_metadata(metadata_json):
    data = {}

    if metadata_json is None:
        return data

    if type(metadata_json) is not dict:
        raise TypeError("Metadata section must be an object")

    for key, value in metadata_json.items():
        utf8_key = key.encode("utf-8")
        if len(utf8_key) > METADATA_MAX_KEY_LENGTH:
            raise ValueError("Metadata keys cannot exceed {0} bytes in length (UTF-8 encoded)"
                             .format(METADATA_MAX_KEY_LENGTH))

        utf8_value = str(value).encode("utf-8")
        if len(utf8_value) > METADATA_MAX_VALUE_LENGTH:
            raise ValueError("{0}:Metadata values cannot exceed {1} bytes in length (UTF-8 encoded"
                             .format(key, METADATA_MAX_VALUE_LENGTH))

        data[utf8_key] = utf8_value

    return data


def build_image_list(image_list_json):
    data = []

    if image_list_json is None:
        return data

    if type(image_list_json) is not list:
        raise TypeError("Image section must be an array")

    for image_json in image_list_json:
        data.append(Image(image_json))

    return data


def build_fpk(spec_json):
    try:
        if type(spec_json) is not dict:
            raise TypeError("Root must be an object")

        signatory = build_signatory(spec_json.get("signature"))
        cipher = build_cipher(spec_json.get("cipher"))
        metadata = build_metadata(spec_json.get("metadata"))
        image_list = build_image_list(spec_json.get("images"))

    except TypeError as e:
        raise FatalError("Spec-file has invalid format: {0}".format(e))
    except ValueError as e:
        raise FatalError("Spec-file contains invalid value: {0}".format(e))


def main(args=None):
    if args is None:
        args = sys.argv

    if len(args) < 3:
        print_usage()
        sys.exit(0)

    spec_path = sys.argv[1]

    try:
        spec_json = read_json_file(spec_path)
    except FileNotFoundError:
        raise FatalError("Spec-file {0} does not exist".format(spec_path))
    except IOError:
        raise FatalError("Unable to read spec-file: {0}".format(e.strerror))
    except ValueError as e:
        raise FatalError("Spec-file contains invalid JSON: {0}".format(e))

    fpk = build_fpk(spec_json)


try:
    if __name__ == "__main__":
        main()
except FatalError as e:
    print("Fatal error: {0}".format(e))
    exit(1)
